import time
import authenticate as au
import os

# DEBUGGING
# lists the sheets available to gspread
def list_available_sheets(gc):
	all_sheets = []
	for sheet in gc.openall():
		all_sheets.append("{}".format(sheet.title))
	return all_sheets

# Opens a spreadsheet for r/w
# spreadsheets must be hosted on gdrive and shared with
# open-service@pairing-gui.iam.gserviceaccount.com
def open_sheet(spreadsheet):
	#if a sheet or sheet name is changed then
	#change the key to the corresponding form it is
	test_keys = {
		"All-Pairings"       : "1iAbMuffaPEGyoOrOvwQXVDbbzIjwfvME4wERXRa34TE",
		"Current-Pairings"   : "10DwO7ImIWqGVHLHCHGEtbXStRJczJ8LUEQOIa2dBRSY",

		"Friend-Form"        : "1M5Qn18Nee5ZxMhx1dlJ1w7Pfe-4QZANoHXkDTpemPqg",
		"Friend-Q"           : "1gVbRIaOQml7Qor9eVx_6B8JJGBovUrjPuFHwwSMzw1w",
		"Friend-List"        : "1mvBR6MocZIRR_obvtlfoGdbpTdRz9amho5BqeegXcVM",
			
		"Chat-Form-Responses": "1c8Z_nR1XC12dIHVt2vNKz9SqXChPMR36ocVattgZsiM",
		"Warrior-Q"          : "1Ka_vFAZf7F8MI0oUequGfJ7Z72Tm9yyQ0lMfWOQ3lMQ",
		"Warrior-List"       : "1Yw0vuaD9NAitqMXJ8Fv5w1rH_oclz0mcCq4yttr4Qw0"
		}
	
	live_keys = {
		"All-Pairings"       : "1LC-zMkJogC3MDSJ8NvOSFDd5ey-h-cmf2HgDXt7nwMA",
		"Current-Pairings"   : "1dXyKnU2rdy9L_JV95GLdmo4CNLQaN44-kv8nxsHWXbE",
		
		# Friend-Form = Friend-List
		"Friend-List"        : "1ZRHLNY7_X_HbNkq1aPgGqO_7St9yfP0sGzVrnoZErec",
		"Friend-Form"        : "1ZRHLNY7_X_HbNkq1aPgGqO_7St9yfP0sGzVrnoZErec",
		"Friend-Q"           : "14OW258k2SshWdUl2ZSPh9aqBt7Y66f1RPJbUh4iH1oY",

		# Chat-Form-Responses = Warrior-List
		"Warrior-List"       : "1tWI7ZH_LBLSM_nvfX9OvfMkYkPy6CXCYd6SmxhhG2qQ",
		"Chat-Form-Responses": "1tWI7ZH_LBLSM_nvfX9OvfMkYkPy6CXCYd6SmxhhG2qQ",
		"Warrior-Q"          : "13fyRN5e5ZPjQFaPE4qItDBRSoJcWM_5Oh7a9kaUrFHI"
		}
	
	#retrieve path to the json file and authenticate with google
	pathfile = open('path2secretfile.txt', 'r')
	path2secretfile = pathfile.readline()[:-1]
	gc = au.LOAD(path2secretfile)
	
	# Open the spreadsheet, throws exception if sheet does not exist
	# we will assume that it does exist
	sheet = gc.open_by_key(test_keys[spreadsheet]).sheet1
	
	return sheet


#list all values in a specified column below the header
def list_col_values(sheet_name, col_num):
	
	#Array of size 100/1000 by default due to google initialization
	sheet = open_sheet(sheet_name)
	
	#Get the column values and pass them to the user
	val = sheet.col_values(col_num)
	values = val[1::] # index 0 column value is column information
	return values


# return a list in the column number specified without empty values
def names_no_null(sheet_name, col_num):
	array = list_col_values(sheet_name, col_num)
	return [y for y in array if y != '']


#given a sheet name and list of names this function
#writes those names to the given sheet in the given column
def rewrite_column(sheet_name, col_num, new_list_of_names):
	
	sheet = open_sheet(sheet_name)

	length = len(new_list_of_names)
	
	# Copy new list of names over to the sheet
	for i in range(0, length):
		#i+2 because it must start at first index and sheets index starts at 1
		sheet.update_cell(i + 2, col_num, new_list_of_names[i])
	
	# Overwrite next 7 values as a precaution
	for i in range(length + 2, length+7):
		sheet.update_cell(i, col_num, "")


# search a row within a sheet for a value
def search_row(sheet, row_num, value):

	#find the first empty row in column 1 to update in.
	array = sheet.row_values(row_num)
	
	# find the value and return its index
	for i in range(0, len(array)):
		if array[i].lower().strip() == value.lower().strip():
			return i + 1 # +1 as sheets are 1 indexed
	
	return len(array)


# Searches a column for a value
# Only works if there are no empty cells between values
def search_column(sheet, col_num, value):
	
	#find the first empty row in column 1 to update in.
	array = sheet.col_values(col_num)

	# find the value and return its index
	length = len(array)
	for i in range(0, length):
		if array[i].lower().strip() == value.lower().strip():
			return i+1

	return length


# Given a pair, add them to the current pairings and all pairing sheets
# also add the person who paired them to the sheet and their notes on why
# ***names need to be unique
def add_pair(chosen_pair, pc_person, notes):

	#Find the first empty row within the column and update it for both spreadsheets
	for element in ["Current-Pairings", "All-Pairings"]:
		sheet = open_sheet(element)
		
		first_empty_row = search_column(sheet, 1, '')
		
		#given array should be of form, [warrior, friend]
		sheet.update_cell(first_empty_row, 1, chosen_pair[0])
		sheet.update_cell(first_empty_row, 2, chosen_pair[1])
		
		if element == 'Current-Pairings':
			sheet.update_cell(first_empty_row, 4, pc_person)
			sheet.update_cell(first_empty_row, 7, notes)
		
		if element == 'All-Pairings':
			sheet.update_cell(first_empty_row, 5, pc_person)
		
		the_time = time.strftime("%m-%d-%y", time.gmtime())
		sheet.update_cell(first_empty_row, 3, the_time)

	

# removes names from the queue number times
# sheet_name specifies the sheet that the queue is in
# either 'Current-Pairings' or "All-Pairings"
def remove_from_queue(sheet_name, name, number=1):
	
	sheet = open_sheet(sheet_name)
	#return all names in current
	
	if sheet_name == "Friend-Q":
		current_names = names_no_null(sheet_name, 1)
		the_numbers   = names_no_null(sheet_name, 2)

		i = 0
		j = 0
		length = len(current_names)
		while i < length:
		#for i in range(len(current_names)):
			if current_names[i].lower().strip() == name.lower().strip():
				j = i
				i = length + 3
			i+=1
		
		temp = int(the_numbers[j])

		#decrement number of people they can help if they are at 1 or more
		if number == 1 and temp > 1:
			#1 because thats where array starts and 1 for being past header.
			sheet.update_cell(j + 1 + 1, 2, temp - 1)
		else:
			#delete the elements from the array
			del the_numbers[j]
			del current_names[j]
			
			rewrite_column(sheet_name, 1, current_names)
			rewrite_column(sheet_name, 2, the_numbers)

	  
	#this is for the warrior queue, because we want to remove in original way
	else:
		current_names = names_no_null(sheet_name, 1)
		times_removed = 0
		new_names = []
		for element in current_names:
			# if we have not removed the user 'number' times, dont append the 
			# name to the new array. Otherwise append all names to new_names
			if element.lower().strip() == name.lower().strip() and times_removed < 1:
				times_removed += 1
			else:
				new_names.append(element.strip())

		rewrite_column(sheet_name, 1, new_names)


# adds the list of names to the queue specified in the sheet
# this should only be used with the friend queue
# see update warrior queue for adding to that list
def add_to_queue(sheet_name, name, number):
	#this is gonna fuck up if theres blanks within the list
	#but you need this to keep things short enough.
	current_names = names_no_null(sheet_name, 1)

	the_numbers   = names_no_null(sheet_name, 2)

	sheet = open_sheet(sheet_name)

	in_list = False
	length = len(current_names)
	i = 0
	while i < length:
		#if name is in list then only update the number
		if current_names[i].lower().strip() == name.lower().strip():
			sheet.update_cell(i+2, 2, int(the_numbers[i])+number)
			in_list = True
			i = length + 10
		i+=1

	if not in_list:
		#add to first empty place if not in list already
		first_empty_row = search_column(sheet, 1, '')
		sheet.update_cell(first_empty_row, 1, name)
		sheet.update_cell(first_empty_row, 2, number)


	"""#old way of doing things
	# get the current list of names and append list_of_names to it
	names = names_no_null(sheet_name, 1)
	for element in list_of_names:
		names.append(element)
	
	# rewrite the column within the spreadsheet
	rewrite_column(sheet_name, 1, names)
	"""

# Gets info from the warrior sheet based on specified datatype
# datatype: 'info', 'contact'
def get_warrior_info(warrior_name, datatype):
	
	#entries numbers edited for live sheets

	#search col 2 for row with warrior_name
	sheet = open_sheet('Chat-Form-Responses')	
	row = search_column(sheet, 2, warrior_name)

	#return the appropriate value from the sheet
	#not sure if necessary since we know person exists if this is called
	#this will mess up if we get a lot of people
	if row < 1000:
		data = sheet.row_values(row)
		if datatype == 'info':
			sex       = data[2]
			year      = data[6]
			interests = data[7]
			hobbies   = data[8]
			struggle  = data[10]
			return [sex, year, interests, hobbies, struggle]
		
		elif datatype == 'contact':
			method = data[3]
			phone  = data[4]
			email  = data[5]
			return [method, phone, email]
		
		else:
			return['']
	else:
		return ['','','','','']
	

# Gets info from the friends sheet based on specified datatype
# datatype: 'info', 'contact'
def get_friend_info(friend_name, datatype):
	
	#R column with names is 18
	sheet = open_sheet('Friend-Form')
	row = search_column(sheet, 18, friend_name)
	
	offset = 1

	# if the row is valid get the data corresponding to the 
	# datatype and pass it to the user
	if row < 1000:
		data = sheet.row_values(row)
		if datatype == 'info':
			sex       = data[3+offset]
			year      = data[4+offset]
			major     = data[5+offset]
			interests = data[6+offset]
			hobbies   = data[12+offset]
			return [sex, year, major, interests, hobbies]
		
		elif datatype == 'contact':
			#add preffered method of contact = data[16+offset]
			phone = data[8+offset]
			email = data[9+offset]
			return [phone, email]

		else:
			return ['']
	else:
		return ['','','','','']

#Removes a pair from Current-Pairings sheet
#pair: [warrior, friend]
def remove_pair(pair):
	cp = open_sheet('Current-Pairings')
	
	#search sheet for a row with pair 
	one = cp.col_values(1)
	two = cp.col_values(2)
	length = len(one)
	i = 0
	while i < length:
		if one[i].lower().strip() == pair[0].lower().strip() and two[i].lower().strip() == pair[1].lower().strip():
			the_row = i + 1
			i = length + 10
		i += 1

	#Return this if go through whole sheet and no pair found
	if i == length:
		return 'Pair Does Not Exist'

	#clear the_row in Current-Pairings (should work 
	#because add_pair just finds first empty row)
	cp.update_cell(the_row, 1, '')
	cp.update_cell(the_row, 2, '')
	cp.update_cell(the_row, 3, '')
	cp.update_cell(the_row, 4, '')
	cp.update_cell(the_row, 5, '')
	cp.update_cell(the_row, 6, '')
	cp.update_cell(the_row, 7, '')
	return 'Pair Removed'

#updates the All-Pairings sheet with the end date (assumed date submitted)
#and any additional notes that were submitted
def update_all_pair(pair, notes=''):
	#update the All-Pairings sheet with end date and notes
	ap = open_sheet('All-Pairings')
	
	one = ap.col_values(1)
	two = ap.col_values(2)
	length = len(one)
	i = 0
	while i < length:
		if one[i].lower().strip() == pair[0] and two[i].lower().strip() == pair[1]:
			the_row = i + 1
			i = length + 10
		i += 1
	
	#Return this if go through whole sheet and no pair found
	if i == length:
		return 'Pair Does Not Exist'
	
	
	#assume current date is end date
	the_time = time.strftime("%m-%d-%y", time.gmtime())
	ap.update_cell(the_row, 4, the_time)
	ap.update_cell(the_row, 6, notes)

def secret(code):
	import random
	phrase = 'woehpdieupnccearateriasom1n'
	key = random.randint(code[0], code[1])
	return phrase[code[2]::key]

#update the warrior queue with new people who
#submitted the form since last time checked
def update_warriorq():
	import datetime
	
	#open queue
	queue = open_sheet("Warrior-Q")

	#get date last checked and get time_diff with right now
	lc_string =  queue.cell(2, 2).value
	last_checked = datetime.datetime.strptime(lc_string, "%m/%d/%Y %H:%M:%S")
	time_diff = datetime.datetime.now() - last_checked

	#only allow checking every 15 minutes so the GET isnt
	#unbearably slow running this all the time
	if datetime.timedelta(minutes=0) <= time_diff:
		#open list (b/c didnt nee outside if)
		Wlist = open_sheet("Chat-Form-Responses")

		#get the dates and names of individuals
		col_num = search_row(Wlist, 1, "Name")
		names = Wlist.col_values(col_num)[1::]
		dates = Wlist.col_values(1)[1::]

		#get date that the sheet was last updated
		#month/day/year
		
		#last_date = datetime.date(last_year, last_month, last_day)


		not_on_queue = []

		i = 0
		while i < len(dates):
			if dates[i] != "":
				date = dates[i].split(" ")
				#print date
				separated = date[0].split("/")
				month = int(separated[0])
				day   = int(separated[1])
				year  = int(separated[2])
				if datetime.date(year, month, day) >= last_checked.date():
					not_on_queue.append(names[i])
			i+=1
	
		#update the queue with the lastest time checked
		current_date = datetime.datetime.now()
		queue.update_cell(2, 2, current_date)


		#rewrite takes time, dont do it if no one new is there.	
		if len(not_on_queue) > 0:
			#EXTEND???!?! how exciting. this takes old queue
			#and adds new names then rewrites the column
			new_list = []
			new_list.extend(names_no_null("Warrior-Q", 1))
			new_list.extend(not_on_queue)
			rewrite_column("Warrior-Q", 1, new_list)
